@page "/catalog/{Guid}"
@using ApiCatalogWeb.Services;

@if (Spine == null)
{
    <div class="container-fluid">
        <p>Loading...</p>
    </div>
}
else
{
    <div class="container-fluid px-0">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><img height="16" width="16" src="/img/Database.svg" /> <a href="/catalog">Catalog</a></li>

                @foreach (var p in Spine.Parents.AsEnumerable().Reverse())
                {
                    if (p == Spine.Selected)
                    {
                        <li class="breadcrumb-item active" aria-current="page"><ApiIcon Kind="@p.Kind" /> @p.Name</li>
                    }
                    else
                    {
                        <li class="breadcrumb-item"><ApiIcon Kind="@p.Kind" /> <a href="/catalog/@p.ApiGuid">@p.Name</a></li>
                    }
                }

                @if (!Spine.Parents.Any(p => p == Spine.Selected))
                {
                    <li class="breadcrumb-item active" aria-current="page"><ApiIcon Kind="@Spine.Selected.Kind" /> @Spine.Selected.Name</li>
                }
            </ol>
        </nav>
    </div>

    <div class="container-fluid">
        <div class="row">
            <ul class="col-md-3 list-unstyled overflow-hidden text-nowrap border-right">
                <li>
                    @{
                        var rootUnsupportedClass = Spine.Root.IsUnsupported ? "text-muted" : "";
                    }

                    @if (Spine.Root == Spine.Selected)
                    {
                        <ApiIcon Kind="@Spine.Root.Kind" /> <span class="font-weight-bold @rootUnsupportedClass">@Spine.Root.Name</span>
                    }
                    else
                    {
                        <ApiIcon Kind="@Spine.Root.Kind" /> <a class="@rootUnsupportedClass" href="/catalog/@Spine.Root.ApiGuid">@Spine.Root.Name</a>
                    }

                    <ul class="list-unstyled pl-4">
                        @foreach (var child in Spine.Children)
                        {
                            var childUnsupportedClass = child.IsUnsupported ? "text-muted" : "";

                            <li>
                                @if (child.ApiId == Spine.Selected.ApiId)
                                {
                                    <ApiIcon Kind="@child.Kind" /> <span class="font-weight-bold @childUnsupportedClass">@child.Name</span>
                                }
                                else
                                {
                                    <ApiIcon Kind="@child.Kind" /> <a class="@childUnsupportedClass" href="/catalog/@child.ApiGuid">@child.Name</a>
                                }
                            </li>
                        }
                    </ul>
                </li>
            </ul>

            <div class="col-md-9">

                @if (SelectedSyntax != null)
                {
                    <SyntaxView Syntax="@SelectedSyntax" CurrentId="@Spine.Selected.ApiGuid" />
                }


                <table class="table my-3">
                    @if (Availability.Current != null)
                    {
                        <tr>
                            <th style="width: 150px">Assembly</th>
                            <td>
                                @($"{Availability.Current.AssemblyName}, Version={Availability.Current.AssemblyVersion}, PublicKeyToken={Availability.Current.AssemblyPublicKeyToken}")
                            </td>
                        </tr>
                    }

                    @if (Availability.Current is ApiCatalogWeb.Services.CatalogPackageAvailability pa)
                    {
                        <tr>
                            <th>Package</th>
                            <td>
                                @($"{pa.PackageName} ({pa.FrameworkName})")
                            </td>
                        </tr>
                    }

                    @foreach (var frameworkGroup in Availability.Frameworks.GroupBy(fx => fx.framework.GetFrameworkDisplayString())
                                                                         .OrderBy(g => g.Key))
                    {
                        <tr>
                            <th>@frameworkGroup.Key</th>
                            <td>
                                <span class="d-flex flex-row flex-wrap align-content-between">
                                    @foreach (var (fx, availability) in frameworkGroup.OrderBy(fx => fx.framework.Version)
                                                                            .ThenBy(fx => fx.framework.Profile))
                                    {
                                        var versionFramework = fx.GetShortFolderName();
                                        var isSelectedVersion = versionFramework == SelectedFramework;
                                        var isPackage = availability is CatalogPackageAvailability;
                                        var versionClass = isPackage
                                                 ? "fx-version-package"
                                                 : "fx-version-inbox";

                                        var activeClass = isSelectedVersion
                                             ? "active"
                                             : "";

                                        <span class="fx-version @versionClass @activeClass m-1">
                                            <SetQueryParameter Key="fx" Value="@versionFramework">@fx.GetVersionDisplayString()</SetQueryParameter>
                                        </span>
                                    }
                                </span>
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
}