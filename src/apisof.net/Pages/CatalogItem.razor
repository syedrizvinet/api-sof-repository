@page "/catalog/{Guid}"

@if (Api == default)
{
    <div class="container-fluid">
        <p>API not found.</p>
    </div>
}
else
{
    <div class="container-fluid px-0">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><img height="16" width="16" src="/img/Database.svg" /> <a href="/catalog">Catalog</a></li>

                @foreach (var api in Breadcrumbs)
                {
                    if (api == Api)
                    {
                        <li class="breadcrumb-item active" aria-current="page"><ApiIcon Kind="@api.Kind" /> @api.Name</li>
                    }
                    else
                    {
                        <li class="breadcrumb-item"><ApiIcon Kind="@api.Kind" /> <a href="/catalog/@api.Guid">@api.Name</a></li>
                    }
                }
            </ol>
        </nav>
    </div>

    <div class="container-fluid">
        <div class="row">
            <ul class="col-md-3 list-unstyled overflow-hidden text-nowrap border-right">
                <li>
                    @{
                        var rootUnsupportedClass = ""; // TODO: Spine.Root.IsUnsupported ? "text-muted" : "";
                    }

                    @if (Parent == Api)
                    {
                        <ApiIcon Kind="@Parent.Kind" /> <span class="font-weight-bold @rootUnsupportedClass">@Parent.Name</span>
                    }
                    else
                    {
                        <ApiIcon Kind="@Parent.Kind" /> <a class="@rootUnsupportedClass" href="/catalog/@Parent.Guid">@Parent.Name</a>
                    }

                    <ul class="list-unstyled pl-4">
                        @foreach (var child in Parent.Children.OrderBy(x => x)) // TODO: Ideally the catalog is pre-sorted
                        {
                            var childUnsupportedClass = ""; // TODO: child.IsUnsupported ? "text-muted" : "";

                            <li>
                                @if (child == Api)
                                {
                                    <ApiIcon Kind="@child.Kind" /> <span class="font-weight-bold @childUnsupportedClass">@child.Name</span>
                                }
                                else
                                {
                                    <ApiIcon Kind="@child.Kind" /> <a class="@childUnsupportedClass" href="/catalog/@child.Guid">@child.Name</a>
                                }
                            </li>
                        }
                    </ul>
                </li>
            </ul>

            <div class="col-md-9">

                @if (SelectedMarkup != null)
                {
                    <SyntaxView Markup="@SelectedMarkup" Current="@Api" />
                }

                <table class="table my-3">
                    @foreach (var usage in Api.Usages)
                    {
                        var value = usage.Percentage * 100;
                        var title = $"Usage on {usage.Source.Name} is {usage.Percentage:P1} (as of {usage.Source.Date})";

                        <tr title="@title">
                            <th>
                                @usage.Source.Name
                            </th>
                            <td>
                                <div class="row align-items-center">
                                    <div class="col col-md-5 col-xl-3">
                                        <div class="progress">
                                            <div class="progress-bar" role="progressbar" style="width: @(value)%;" aria-valuenow="@value" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        @usage.Percentage.ToString("P1")
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }

                    @if (SelectedAvailability != null)
                    {
                        var assembly = SelectedAvailability.Declaration.Assembly;
                        <tr>
                            <th style="width: 185px">Assembly</th>
                            <td>
                                @assembly.Name <span class="small text-muted">, Version=@assembly.Version, PublicKeyToken=@assembly.PublicKeyToken</span>
                            </td>
                        </tr>
                    }

                    @if (SelectedAvailability != null && !SelectedAvailability.IsInBox)
                    {
                        var package = SelectedAvailability.Package;
                        var folder = SelectedAvailability.PackageFramework.GetShortFolderName();
                        <tr>
                            <th>Package</th>
                            <td>
                                <a href="https://nuget.org/packages/@package.Name">@package.Name</a> <span class="small text-muted">@folder</span>
                            </td>
                        </tr>
                    }

                    @if (!string.IsNullOrEmpty(HelpLink))
                    {
                        <tr>
                            <th>Help</th>
                            <td>
                                <a href="@HelpLink">Documentation</a>
                            </td>
                        </tr>
                    }

                    @{
                        var inboxApiTitle = "The API is built into the target framework.";
                        var packageApiTitle = "The API requires a package to be referenced.";
                    }

                    @foreach (var frameworkGroup in Availability.Frameworks.GroupBy(fx => fx.Framework.GetFrameworkDisplayString())
                                                                           .OrderBy(g => g.Key))
                    {
                        <tr>
                            <th>@frameworkGroup.Key</th>
                            <td>
                                <span class="d-flex flex-row flex-wrap align-content-between">
                                    @foreach (var group in frameworkGroup.GroupBy(fx => fx.Framework)
                                                                         .OrderBy(g => g.Key.Version)
                                                                         .ThenBy(g => g.Key.Platform)
                                                                         .ThenBy(g => g.Key.PlatformVersion)
                                                                         .ThenBy(g => g.Key.Profile))
                                    {
                                        var availability = group.First();
                                        var versionFramework = availability.Framework.GetShortFolderName();
                                        var isSelectedVersion = versionFramework == SelectedFramework;
                                        var versionClass = availability.IsInBox
                                                 ? "fx-version-inbox"
                                                 : "fx-version-package";
                                        var title = availability.IsInBox
                                                 ? inboxApiTitle
                                                 : packageApiTitle;

                                        var activeClass = isSelectedVersion
                                             ? "active"
                                             : "";

                                        <span class="fx-version @versionClass @activeClass m-1" title="@title">
                                            <SetQueryParameter Key="fx" Value="@versionFramework">@availability.Framework.GetVersionDisplayString()</SetQueryParameter>
                                        </span>
                                    }
                                </span>
                            </td>
                        </tr>
                    }
                </table>
                <ul class="list-inline small">
                    <li class="list-inline-item">
                        <span class="fx-version fx-version-inbox" title="@inboxApiTitle">Built-in API</span>
                    </li>
                    <li class="list-inline-item">
                        <span class="fx-version fx-version-package" title="@packageApiTitle">Package-provided API</span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
}